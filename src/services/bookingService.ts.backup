import { api } from './api';

// Booking DTOs matching backend structure
export interface BookingListDTO {
  id: number;
  eventId: number;
  eventTitle: string;
  customerEmail: string;
  customerName: string;
  totalAmount: number;
  processingFee: number;
  currency: string;
  paymentStatus: string;
  status: string;
  createdAt: string;
  itemCount: number;
  ticketCount: number;
  foodCount: number;
}

export interface BookingLineItemDTO {
  id: number;
  itemType: string;
  itemId: number;
  itemName: string;
  quantity: number;
  unitPrice: number;
  totalPrice: number;
  seatDetails: string;
  itemDetails: string;
  qrCode: string;
  status: string;
  createdAt: string;
}

export interface BookingDetailDTO {
  id: number;
  eventId: number;
  eventTitle: string;
  eventDate?: string;
  eventLocation: string;
  organizerName?: string;
  customerEmail: string;
  customerFirstName: string;
  customerLastName: string;
  customerMobile: string;
  totalAmount: number;
  processingFee: number;
  currency: string;
  paymentIntentId: string;
  paymentStatus: string;
  status: string;
  createdAt: string;
  metadata: string;
  lineItems: BookingLineItemDTO[];
}

export interface CreateBookingRequest {
  eventId: number;
  totalAmount: number;
  lineItems: Array<{
    type: 'Ticket' | 'Seat' | 'Food';
    ticketTypeId?: number;
    seatId?: number | null;
    foodItemId?: number;
    quantity: number;
    unitPrice: number;
    totalPrice: number;
    description: string;
  }>;
}

export interface UpdateBookingStatusRequest {
  status: string;
}

export interface RefundRequest {
  reason: string;
  amount?: number; // Partial refund amount, null for full refund
}

export interface BookingFilters {
  eventId?: number;
  status?: string;
  fromDate?: string;
  toDate?: string;
  page?: number;
  pageSize?: number;
}

/**
 * Service for managing bookings using the new BookingLineItems architecture
 */
export class BookingService {
  
  /**
   * Create a new booking
   */
  static async createBooking(request: CreateBookingRequest): Promise<BookingDetailDTO> {
    const response = await api.post<BookingDetailDTO>('/bookings', request);
    return response.data;
  }
  
  /**
   * Format booking data for display
   */t: number;
  processingFee: number;
  currency: string;
  paymentStatus: string;
  status: string;
  createdAt: string;
  itemCount: number;
  ticketCount: number;
  foodCount: number;
}

export interface BookingLineItemDTO {
  id: number;
  itemType: string;
  itemId: number;
  itemName: string;
  quantity: number;
  unitPrice: number;
  totalPrice: number;
  seatDetails: string;
  itemDetails: string;
  qrCode: string;
  status: string;
  createdAt: string;
}

export interface BookingDetailDTO {
  id: number;
  eventId: number;
  eventTitle: string;
  eventDate?: string;
  eventLocation: string;
  organizerName?: string;
  customerEmail: string;
  customerFirstName: string;
  customerLastName: string;
  customerMobile: string;
  totalAmount: number;
  processingFee: number;
  currency: string;
  paymentIntentId: string;
  paymentStatus: string;
  status: string;
  createdAt: string;
  metadata: string;
  lineItems: BookingLineItemDTO[];
}

export interface UpdateBookingStatusRequest {
  status: string;
}

export interface RefundRequest {
  reason: string;
  amount?: number; // Partial refund amount, null for full refund
}

export interface CreateBookingRequest {
  eventId: number;
  totalAmount: number;
  lineItems: Array<{
    type: 'Ticket' | 'Seat' | 'Food';
    ticketTypeId?: number;
    seatId?: number | null;
    foodItemId?: number;
    quantity: number;
    unitPrice: number;
    totalPrice: number;
    description: string;
  }>;
}

export interface BookingFilters {
  eventId?: number;
  status?: string;
  fromDate?: string;
  toDate?: string;
  page?: number;
  pageSize?: number;
}

/**
 * Service for managing bookings using the new BookingLineItems architecture
 */
export class BookingService {
  
  /**
   * Create a new booking
   */
  static async createBooking(request: CreateBookingRequest): Promise<BookingDetailDTO> {
    const response = await api.post<BookingDetailDTO>('/bookings', request);
    return response.data;
  }
  
  /**
   * Get all bookings with filtering and pagination (Admin/Organizer only)
   */
  static async getBookings(filters: BookingFilters = {}): Promise<{
    bookings: BookingListDTO[];
    totalCount: number;
    page: number;
    pageSize: number;
  }> {
    const params = new URLSearchParams();
    
    if (filters.eventId) params.append('eventId', filters.eventId.toString());
    if (filters.status) params.append('status', filters.status);
    if (filters.fromDate) params.append('fromDate', filters.fromDate);
    if (filters.toDate) params.append('toDate', filters.toDate);
    if (filters.page) params.append('page', filters.page.toString());
    if (filters.pageSize) params.append('pageSize', filters.pageSize.toString());

    const response = await api.get<BookingListDTO[]>(`/bookings?${params.toString()}`);
    
    // Extract pagination info from headers
    const totalCount = parseInt(response.headers['x-total-count'] || '0');
    const page = parseInt(response.headers['x-page'] || '1');
    const pageSize = parseInt(response.headers['x-page-size'] || '50');
    
    return {
      bookings: response.data,
      totalCount,
      page,
      pageSize
    };
  }

  /**
   * Get specific booking details by ID
   */
  static async getBooking(id: number): Promise<BookingDetailDTO> {
    const response = await api.get<BookingDetailDTO>(`/bookings/${id}`);
    return response.data;
  }

  /**
   * Get booking line items for a specific booking
   */
  static async getBookingLineItems(bookingId: number): Promise<BookingLineItemDTO[]> {
    const response = await api.get<BookingLineItemDTO[]>(`/bookings/${bookingId}/line-items`);
    return response.data;
  }

  /**
   * Get current user's bookings
   */
  static async getMyBookings(): Promise<BookingListDTO[]> {
    const response = await api.get<BookingListDTO[]>('/bookings/my-bookings');
    return response.data;
  }

  /**
   * Update booking status (Admin/Organizer only)
   */
  static async updateBookingStatus(
    bookingId: number, 
    request: UpdateBookingStatusRequest
  ): Promise<{ message: string; oldStatus: string; newStatus: string }> {
    const response = await api.put<{ message: string; oldStatus: string; newStatus: string }>(
      `/bookings/${bookingId}/status`, 
      request
    );
    return response.data;
  }

  /**
   * Process refund for a booking (Admin/Organizer only)
   */
  static async processRefund(
    bookingId: number, 
    request: RefundRequest
  ): Promise<{ message: string; bookingId: number; status: string; note?: string }> {
    const response = await api.post<{ message: string; bookingId: number; status: string; note?: string }>(
      `/bookings/${bookingId}/refund`, 
      request
    );
    return response.data;
  }

  /**
   * Get booking statistics for dashboard
   */
  static async getBookingStats(eventId?: number): Promise<{
    totalBookings: number;
    totalRevenue: number;
    completedBookings: number;
    cancelledBookings: number;
    recentBookings: BookingListDTO[];
  }> {
    const filters: BookingFilters = { pageSize: 10 };
    if (eventId) filters.eventId = eventId;
    
    const { bookings, totalCount } = await this.getBookings(filters);
    
    const totalRevenue = bookings.reduce((sum, booking) => 
      booking.paymentStatus === 'Completed' ? sum + booking.totalAmount : sum, 0
    );
    
    const completedBookings = bookings.filter(b => b.paymentStatus === 'Completed').length;
    const cancelledBookings = bookings.filter(b => b.status === 'Cancelled').length;
    
    return {
      totalBookings: totalCount,
      totalRevenue,
      completedBookings,
      cancelledBookings,
      recentBookings: bookings.slice(0, 5)
    };
  }

  /**
   * Parse booking metadata safely
   */
  static parseBookingMetadata(metadata: string): any {
    try {
      return JSON.parse(metadata);
    } catch {
      return {};
    }
  }

  /**
   * Parse line item details safely
   */
  static parseLineItemDetails(details: string): any {
    try {
      return JSON.parse(details);
    } catch {
      return {};
    }
  }

  /**
   * Parse seat details safely
   */
  static parseSeatDetails(seatDetails: string): any {
    try {
      return JSON.parse(seatDetails);
    } catch {
      return {};
    }
  }

  /**
   * Format booking for display
   */
  static formatBookingForDisplay(booking: BookingDetailDTO): {
    basic: {
      id: number;
      eventTitle: string;
      customerName: string;
      totalAmount: string;
      status: string;
      createdAt: string;
    };
    tickets: Array<{
      name: string;
      quantity: number;
      unitPrice: string;
      totalPrice: string;
      details?: any;
    }>;
    food: Array<{
      name: string;
      quantity: number;
      unitPrice: string;
      totalPrice: string;
    }>;
    metadata: any;
  } {
    const tickets = booking.lineItems
      .filter(item => item.itemType === 'Ticket')
      .map(item => ({
        name: item.itemName,
        quantity: item.quantity,
        unitPrice: `$${item.unitPrice.toFixed(2)}`,
        totalPrice: `$${item.totalPrice.toFixed(2)}`,
        details: this.parseLineItemDetails(item.itemDetails)
      }));

    const food = booking.lineItems
      .filter(item => item.itemType === 'Food')
      .map(item => ({
        name: item.itemName,
        quantity: item.quantity,
        unitPrice: `$${item.unitPrice.toFixed(2)}`,
        totalPrice: `$${item.totalPrice.toFixed(2)}`
      }));

    return {
      basic: {
        id: booking.id,
        eventTitle: booking.eventTitle,
        customerName: `${booking.customerFirstName} ${booking.customerLastName}`.trim(),
        totalAmount: `$${booking.totalAmount.toFixed(2)}`,
        status: booking.status,
        createdAt: new Date(booking.createdAt).toLocaleString()
      },
      tickets,
      food,
      metadata: this.parseBookingMetadata(booking.metadata)
    };
  }
}

export default BookingService;
